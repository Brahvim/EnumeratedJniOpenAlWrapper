public final static int ALC_API = __declspec(dllimport);
public final static int ALC_API = extern;
public final static int ALC_APIENTRY = __cdecl;
/* Deprecated macros. */

/** Supported ALC version? */

/** Opaque device handle */

/** Opaque context handle */

/** 8-bit boolean */

/** character */

/** signed 8-bit integer */

/** unsigned 8-bit integer */

/** signed 16-bit integer */

/** unsigned 16-bit integer */

/** signed 32-bit integer */

/** unsigned 32-bit integer */

/** non-negative 32-bit integer size */

/** 32-bit enumeration value */

/** 32-bit IEEE-754 floating-point */

/** 64-bit IEEE-754 floating-point */

/** void type (for opaque pointers only) */

/* Enumeration values begin at column 50. Do not use tabs. */

/** Boolean False. */

/** Boolean True. */

/** Context attribute: <int> Hz. */

/** Context attribute: <int> Hz. */

/** Context attribute: AL_TRUE or AL_FALSE synchronous context? */

/** Context attribute: <int> requested Mono (3D) Sources. */

/** Context attribute: <int> requested Stereo Sources. */

/** No error. */

/** Invalid device handle. */

/** Invalid context handle. */

/** Invalid enumeration passed to an ALC call. */

/** Invalid value passed to an ALC call. */

/** Out of memory. */

/** Runtime ALC major version. */

/** Runtime ALC minor version. */

/** Context attribute list size. */

/** Context attribute list properties. */

/** String for the default device specifier. */

/**
 * Device specifier string.
 *
 * If device handle is NULL, it is instead a null-character separated list of
 * strings of known device specifiers (list ends with an empty string).
 */

/** String for space-separated list of ALC extensions. */

/** Capture extension */

public final static int ALC_EXT_CAPTURE = 1;
/**
 * Capture device specifier string.
 *
 * If device handle is NULL, it is instead a null-character separated list of
 * strings of known capture device specifiers (list ends with an empty string).
 */

/** String for the default capture device specifier. */

/** Number of sample frames available for capture. */

/** Enumerate All extension */

public final static int ALC_ENUMERATE_ALL_EXT = 1;
/** String for the default extended device specifier. */

/**
 * Device's extended specifier string.
 *
 * If device handle is NULL, it is instead a null-character separated list of
 * strings of known extended device specifiers (list ends with an empty string).
 */

/* Context management. */

/** Create and attach a context to the given device. */

/**
 * Makes the given context the active process-wide context. Passing NULL clears
 * the active context.
 */

/** Resumes processing updates for the given context. */

/** Suspends updates for the given context. */

/** Remove a context from its device and destroys it. */

/** Returns the currently active context. */

/** Returns the device that a particular context is attached to. */

/* Device management. */

/** Opens the named playback device. */

/** Closes the given playback device. */

/* Error support. */

/** Obtain the most recent Device error. */

/* Extension support. */

/**
 * Query for the presence of an extension on the device. Pass a NULL device to
 * query a device-inspecific extension.
 */

/**
 * Retrieve the address of a function. Given a non-NULL device, the returned
 * function may be device-specific.
 */

/**
 * Retrieve the value of an enum. Given a non-NULL device, the returned value
 * may be device-specific.
 */

/* Query functions. */

/** Returns information about the device, and error strings. */

/** Returns information about the device and the version of OpenAL. */

/* Capture functions. */

/**
 * Opens the named capture device with the given frequency, format, and buffer
 * size.
 */

/** Closes the given capture device. */

/** Starts capturing samples into the device buffer. */

/** Stops capturing samples. Samples in the device buffer remain available. */

/** Reads samples from the device buffer. */

/* Pointer-to-function types, useful for storing dynamically loaded ALC entry
 * points.
 */

